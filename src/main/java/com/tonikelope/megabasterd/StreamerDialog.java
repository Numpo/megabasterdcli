/*
 __  __                  _               _               _ 
|  \/  | ___  __ _  __ _| |__   __ _ ___| |_ ___ _ __ __| |
| |\/| |/ _ \/ _` |/ _` | '_ \ / _` / __| __/ _ \ '__/ _` |
| |  | |  __/ (_| | (_| | |_) | (_| \__ \ ||  __/ | | (_| |
|_|  |_|\___|\__, |\__,_|_.__/ \__,_|___/\__\___|_|  \__,_|
             |___/                                         
Â© Perpetrated by tonikelope since 2016
 */
package com.tonikelope.megabasterd;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.tonikelope.megabasterd.MainPanel.THREAD_POOL;
import static com.tonikelope.megabasterd.MiscTools.Bin2UrlBASE64;
import static com.tonikelope.megabasterd.MiscTools.checkMegaAccountLoginAndShowMasterPassDialog;
import static com.tonikelope.megabasterd.MiscTools.copyTextToClipboard;
import static com.tonikelope.megabasterd.MiscTools.findFirstRegex;
import static java.awt.event.WindowEvent.WINDOW_CLOSING;

/**
 * @author tonikelope
 */
public class StreamerDialog extends javax.swing.JDialog implements ClipboardChangeObserver {

    private final ClipboardSpy _clipboardspy;
    private final MainPanelView _mainPanelView;
    private final MainPanel _main_panel;
    private String _selected_item;

    public JButton getDance_button() {
        return this.dance_button;
    }

    public JComboBox<String> getUse_mega_account_down_combobox() {
        return this.use_mega_account_down_combobox;
    }

    public MainPanel getMain_panel() {
        return this._main_panel;
    }

    /**
     * Creates new form Streamer
     *
     * @param clipboardspy
     */
    public StreamerDialog(final MainPanelView parent, final boolean modal, final ClipboardSpy clipboardspy) {

        super(parent, modal);

        this._main_panel = parent.getMain_panel();

        this._clipboardspy = clipboardspy;

        this._selected_item = null;

        this._mainPanelView = parent;

        MiscTools.GUIRunAndWait(() -> {

            this.initComponents();

//            updateFonts(this, GUI_FONT, _main_panel.getZoom_factor());
//
//            translateLabels(this);

            if (this._main_panel.isUse_mega_account_down() && this._main_panel.getMega_accounts().size() > 0) {

                THREAD_POOL.execute(() -> {
                    MiscTools.GUIRun(() -> {
                        final String mega_default_down = this._main_panel.getMega_account_down();

                        this.use_mega_account_down_combobox.addItem(mega_default_down);

                        this._main_panel.getMega_accounts().keySet().stream().filter((k) -> (!mega_default_down.equals(k))).forEachOrdered((k) -> {
                            this.use_mega_account_down_combobox.addItem(k);
                        });
                        this.use_mega_account_down_combobox.addItem("");
                        this.use_mega_account_down_combobox.setSelectedIndex(0);
                    });
                });

            } else {

                this.use_mega_account_down_combobox.setEnabled(false);
                this.use_mega_account_down_combobox.setVisible(false);
                this.use_mega_account_down_label.setEnabled(false);
                this.use_mega_account_down_label.setVisible(false);
            }

            this.pack();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.put_label = new javax.swing.JLabel();
        this.dance_button = new javax.swing.JButton();
        this.original_link_textfield = new javax.swing.JTextField();
        this.use_mega_account_down_label = new javax.swing.JLabel();
        this.use_mega_account_down_combobox = new javax.swing.JComboBox<>();

        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.setTitle("Streamer");
        this.setResizable(false);

        this.put_label.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.put_label.setText("Put your MEGA/MegaCrypter/ELC link here in order to get a streaming link:");
        this.put_label.setDoubleBuffered(true);

        this.dance_button.setBackground(new java.awt.Color(102, 204, 255));
        this.dance_button.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        this.dance_button.setForeground(new java.awt.Color(255, 255, 255));
        this.dance_button.setText("Let's dance, baby");
        this.dance_button.setDoubleBuffered(true);
        this.dance_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                StreamerDialog.this.dance_buttonActionPerformed(evt);
            }
        });

        this.original_link_textfield.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        this.original_link_textfield.setDoubleBuffered(true);

        this.use_mega_account_down_label.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.use_mega_account_down_label.setText("Use this account for streaming:");

        this.use_mega_account_down_combobox.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        this.use_mega_account_down_combobox.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                StreamerDialog.this.use_mega_account_down_comboboxItemStateChanged(evt);
            }
        });

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
        this.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(this.use_mega_account_down_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.use_mega_account_down_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(this.dance_button))
                                        .addComponent(this.put_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(this.original_link_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(this.put_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(this.original_link_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.dance_button)
                                        .addComponent(this.use_mega_account_down_combobox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(this.use_mega_account_down_label))
                                .addContainerGap())
        );

        this.original_link_textfield.addMouseListener(new ContextMenuMouseListener());

        this.pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dance_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dance_buttonActionPerformed

        this.dance_button.setEnabled(false);

        this.original_link_textfield.setEnabled(false);

        final Dialog tthis = this;

        THREAD_POOL.execute(() -> {
            try {
                boolean error = false;

                String stream_link = null;

                String link = URLDecoder.decode(this.original_link_textfield.getText(), "UTF-8").trim();

                if (link.length() > 0) {

                    try {

                        if (findFirstRegex("://enc", link, 0) != null) {

                            link = CryptTools.decryptMegaDownloaderLink(link);

                        } else if (findFirstRegex("://elc", link, 0) != null) {

                            final HashSet links = CryptTools.decryptELC(link, ((MainPanelView) tthis.getParent()).getMain_panel());

                            if (links != null) {

                                link = (String) links.iterator().next();
                            }
                        }

                    } catch (final Exception ex) {

                        error = true;

                        LOG.log(Level.SEVERE, ex.getMessage());
                    }

                    final String data;

                    if (findFirstRegex("://mega(\\.co)?\\.nz/#[^fF]", link, 0) != null || findFirstRegex("://mega(\\.co)?\\.nz/#F*", link, 0) != null || findFirstRegex("https?://[^/]+/![^!]+![0-9a-fA-F]+", link, 0) != null) {

                        if (link.contains("#F*")) {

                            final MegaAPI ma = new MegaAPI();

                            final Set<String> links = new HashSet<>();

                            links.add(link);

                            final List nlinks = ma.GENERATE_N_LINKS(links);

                            link = (String) nlinks.get(0);
                        }

                        final String selected_account = (String) this.use_mega_account_down_combobox.getSelectedItem();

                        data = Bin2UrlBASE64(((selected_account != null ? selected_account : "") + "|" + link).getBytes("UTF-8"));

                        stream_link = "http://localhost:1337/video/" + data;

                    } else {

                        error = true;
                    }

                } else {

                    error = true;
                }

                if (error) {

                    MiscTools.GUIRun(() -> {
                        JOptionPane.showMessageDialog(tthis, LabelTranslatorSingleton.getInstance().translate("Please, paste a Mega/MegaCrypter/ELC link!"), "Error", JOptionPane.ERROR_MESSAGE);

                        this.original_link_textfield.setText("");

                        this.dance_button.setEnabled(true);

                        this.original_link_textfield.setEnabled(true);
                    });

                } else {

                    this._mainPanelView.getMain_panel().getClipboardspy().detachObserver((ClipboardChangeObserver) tthis);
                    copyTextToClipboard(stream_link);
                    MiscTools.GUIRun(() -> {
                        JOptionPane.showMessageDialog(tthis, LabelTranslatorSingleton.getInstance().translate("Streaming link was copied to clipboard!\nRemember to keep MegaBasterd running in background while playing content."));
                        this.dispose();
                        this.getParent().dispatchEvent(new WindowEvent(tthis, WINDOW_CLOSING));
                    });
                }
            } catch (final UnsupportedEncodingException ex) {
                LOG.log(Level.SEVERE, ex.getMessage());
            }
        });

    }//GEN-LAST:event_dance_buttonActionPerformed

    private void use_mega_account_down_comboboxItemStateChanged(final java.awt.event.ItemEvent evt) {//GEN-FIRST:event_use_mega_account_down_comboboxItemStateChanged

        if (this._selected_item == null || !this.use_mega_account_down_combobox.getSelectedItem().equals(this._selected_item)) {
            this._selected_item = (String) this.use_mega_account_down_combobox.getSelectedItem();

            if (this._main_panel.isUse_mega_account_down() && !"".equals(this._selected_item)) {

                this.use_mega_account_down_combobox.setEnabled(false);

                this.dance_button.setEnabled(false);

                this.dance_button.setText(LabelTranslatorSingleton.getInstance().translate("Checking MEGA account..."));

                this.pack();

                final StreamerDialog tthis = this;

                THREAD_POOL.execute(() -> {
                    boolean use_account = true;
                    try {

                        if (checkMegaAccountLoginAndShowMasterPassDialog(this._main_panel, this._selected_item) == null) {
                            use_account = false;
                        }

                    } catch (final Exception ex) {

                        use_account = false;
                    }
                    if (!use_account) {
                        MiscTools.GUIRun(() -> {
                            this.use_mega_account_down_combobox.setSelectedIndex(this._main_panel.getMega_accounts().size());
                        });
                    }
                    MiscTools.GUIRun(() -> {
                        this.getUse_mega_account_down_combobox().setEnabled(true);

                        this.getDance_button().setText(LabelTranslatorSingleton.getInstance().translate("Let's dance, baby"));

                        this.getDance_button().setEnabled(true);

                        this.pack();
                    });
                });

            }
        }
    }//GEN-LAST:event_use_mega_account_down_comboboxItemStateChanged

    @Override
    public void notifyClipboardChange() {

        MiscTools.GUIRun(() -> {
//            String link = extractFirstMegaLinkFromString(extractStringFromClipboardContents(_clipboardspy.getContents()));

//            if (!link.contains("/#F!")) {
//
//                original_link_textfield.setText(link);
//            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dance_button;
    private javax.swing.JTextField original_link_textfield;
    private javax.swing.JLabel put_label;
    private javax.swing.JComboBox<String> use_mega_account_down_combobox;
    private javax.swing.JLabel use_mega_account_down_label;
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(StreamerDialog.class.getName());

}
