/*
 __  __                  _               _               _ 
|  \/  | ___  __ _  __ _| |__   __ _ ___| |_ ___ _ __ __| |
| |\/| |/ _ \/ _` |/ _` | '_ \ / _` / __| __/ _ \ '__/ _` |
| |  | |  __/ (_| | (_| | |_) | (_| \__ \ ||  __/ | | (_| |
|_|  |_|\___|\__, |\__,_|_.__/ \__,_|___/\__\___|_|  \__,_|
             |___/                                         
Â© Perpetrated by tonikelope since 2016
 */
package com.tonikelope.megabasterd;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.tonikelope.megabasterd.MainPanel.THREAD_POOL;
import static com.tonikelope.megabasterd.MiscTools.copyTextToClipboard;
import static java.lang.Integer.MAX_VALUE;

/**
 * @author tonikelope
 */
public class DownloadView extends javax.swing.JPanel implements TransferenceView {

    private final Download _download;

    public JButton getQueue_bottom_button() {
        return this.queue_bottom_button;
    }

    public JButton getQueue_top_button() {
        return this.queue_top_button;
    }

    public JButton getQueue_down_button() {
        return this.queue_down_button;
    }

    public JButton getQueue_up_button() {
        return this.queue_up_button;
    }

    public JButton getClose_button() {
        return this.close_button;
    }

    public JButton getCopy_link_button() {
        return this.copy_link_button;
    }

    public JButton getOpen_folder_button() {
        return this.open_folder_button;
    }

    public JLabel getFile_name_label() {
        return this.file_name_label;
    }

    public JLabel getFile_size_label() {
        return this.file_size_label;
    }

    public JCheckBox getKeep_temp_checkbox() {
        return this.keep_temp_checkbox;
    }

    public JButton getPause_button() {
        return this.pause_button;
    }

    public JProgressBar getProgress_pbar() {
        return this.progress_pbar;
    }

    public JButton getRestart_button() {
        return this.restart_button;
    }

    public JLabel getSlot_status_label() {
        return this.slot_status_label;
    }

    public JLabel getSlots_label() {
        return this.slots_label;
    }

    public JSpinner getSlots_spinner() {
        return this.slots_spinner;
    }

    public JLabel getSpeed_label() {
        return this.speed_label;
    }

    public JLabel getStatus_label() {
        return this.status_label;
    }

    public JButton getStop_button() {
        return this.stop_button;
    }

    public DownloadView(final Download download) {

        final DownloadView tthis = this;

        this._download = download;

        MiscTools.GUIRunAndWait(() -> {

            this.initComponents();

//            updateFonts(tthis, GUI_FONT, download.getMain_panel().getZoom_factor());
//
//            translateLabels(tthis);

            this.slots_spinner.setModel(new SpinnerNumberModel(this._download.getMain_panel().getDefault_slots_down(), Download.MIN_WORKERS, Download.MAX_WORKERS, 1));

            ((JSpinner.DefaultEditor) this.slots_spinner.getEditor()).getTextField().setEditable(false);

            this.speed_label.setForeground(new Color(0, 128, 255));
            this.progress_pbar.setMinimum(0);
            this.progress_pbar.setMaximum(MAX_VALUE);
            this.progress_pbar.setStringPainted(true);

            this.status_label.setText("");

            for (final JComponent c : new JComponent[]{this.queue_top_button, this.queue_bottom_button, this.queue_up_button, this.queue_down_button, this.slots_spinner, this.slots_label, this.pause_button, this.stop_button, this.speed_label, this.progress_pbar, this.keep_temp_checkbox, this.file_name_label, this.close_button, this.copy_link_button, this.restart_button, this.file_size_label, this.open_folder_button}) {

                c.setVisible(false);
            }
        });

    }

    public void hideAllExceptStatus() {

        MiscTools.GUIRunAndWait(() -> {
            for (final JComponent c : new JComponent[]{this.speed_label, this.slots_spinner, this.slots_label, this.slot_status_label, this.slot_status_label, this.pause_button, this.stop_button, this.progress_pbar, this.keep_temp_checkbox}) {

                c.setVisible(false);
            }

            for (final JComponent c : new JComponent[]{this.status_label, this.file_name_label, this.file_size_label}) {

                c.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.status_label = new javax.swing.JLabel();
        this.slots_label = new javax.swing.JLabel();
        this.slots_spinner = new javax.swing.JSpinner();
        this.speed_label = new javax.swing.JLabel();
        this.progress_pbar = new javax.swing.JProgressBar();
        this.pause_button = new javax.swing.JButton();
        this.stop_button = new javax.swing.JButton();
        this.keep_temp_checkbox = new javax.swing.JCheckBox();
        this.file_name_label = new javax.swing.JLabel();
        this.close_button = new javax.swing.JButton();
        this.copy_link_button = new javax.swing.JButton();
        this.restart_button = new javax.swing.JButton();
        this.file_size_label = new javax.swing.JLabel();
        this.open_folder_button = new javax.swing.JButton();
        this.slot_status_label = new javax.swing.JLabel();
        this.queue_up_button = new javax.swing.JButton();
        this.queue_down_button = new javax.swing.JButton();
        this.queue_top_button = new javax.swing.JButton();
        this.queue_bottom_button = new javax.swing.JButton();

        this.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 3, true));

        this.status_label.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        this.status_label.setForeground(new java.awt.Color(102, 102, 102));
        this.status_label.setText("status");
        this.status_label.setDoubleBuffered(true);

        this.slots_label.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.slots_label.setText("Slots");
        this.slots_label.setDoubleBuffered(true);

        this.slots_spinner.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        this.slots_spinner.setToolTipText("Slots");
        this.slots_spinner.setDoubleBuffered(true);
        this.slots_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(final javax.swing.event.ChangeEvent evt) {
                DownloadView.this.slots_spinnerStateChanged(evt);
            }
        });

        this.speed_label.setFont(new java.awt.Font("Dialog", 1, 26)); // NOI18N
        this.speed_label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        this.speed_label.setText("speed");
        this.speed_label.setDoubleBuffered(true);

        this.progress_pbar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.progress_pbar.setDoubleBuffered(true);

        this.pause_button.setBackground(new java.awt.Color(255, 153, 0));
        this.pause_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.pause_button.setForeground(java.awt.Color.white);
        this.pause_button.setText("PAUSE DOWNLOAD");
        this.pause_button.setDoubleBuffered(true);
        this.pause_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.pause_buttonActionPerformed(evt);
            }
        });

        this.stop_button.setBackground(new java.awt.Color(255, 0, 0));
        this.stop_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.stop_button.setForeground(java.awt.Color.white);
        this.stop_button.setText("CANCEL DOWNLOAD");
        this.stop_button.setDoubleBuffered(true);
        this.stop_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.stop_buttonActionPerformed(evt);
            }
        });

        this.keep_temp_checkbox.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.keep_temp_checkbox.setSelected(true);
        this.keep_temp_checkbox.setText("Keep temp file");
        this.keep_temp_checkbox.setDoubleBuffered(true);

        this.file_name_label.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        this.file_name_label.setForeground(new java.awt.Color(0, 102, 153));
        this.file_name_label.setText("---");
        this.file_name_label.setDoubleBuffered(true);

        this.close_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.close_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-cancel-30.png"))); // NOI18N
        this.close_button.setText("Close");
        this.close_button.setDoubleBuffered(true);
        this.close_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.close_buttonActionPerformed(evt);
            }
        });

        this.copy_link_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.copy_link_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-copy-to-clipboard-30.png"))); // NOI18N
        this.copy_link_button.setText("Copy link");
        this.copy_link_button.setDoubleBuffered(true);
        this.copy_link_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.copy_link_buttonActionPerformed(evt);
            }
        });

        this.restart_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.restart_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-restart-30.png"))); // NOI18N
        this.restart_button.setText("Restart");
        this.restart_button.setDoubleBuffered(true);
        this.restart_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.restart_buttonActionPerformed(evt);
            }
        });

        this.file_size_label.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        this.file_size_label.setForeground(new java.awt.Color(0, 102, 153));
        this.file_size_label.setText("---");
        this.file_size_label.setDoubleBuffered(true);

        this.open_folder_button.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.open_folder_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-folder-30.png"))); // NOI18N
        this.open_folder_button.setText("Open folder");
        this.open_folder_button.setDoubleBuffered(true);
        this.open_folder_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.open_folder_buttonActionPerformed(evt);
            }
        });

        this.slot_status_label.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.slot_status_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        this.slot_status_label.setDoubleBuffered(true);

        this.queue_up_button.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.queue_up_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/arriba_1.png"))); // NOI18N
        this.queue_up_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.queue_up_buttonActionPerformed(evt);
            }
        });

        this.queue_down_button.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.queue_down_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/abajo_1.png"))); // NOI18N
        this.queue_down_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.queue_down_buttonActionPerformed(evt);
            }
        });

        this.queue_top_button.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        this.queue_top_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/arrow_up.png"))); // NOI18N
        this.queue_top_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.queue_top_buttonActionPerformed(evt);
            }
        });

        this.queue_bottom_button.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        this.queue_bottom_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/arrow_down.png"))); // NOI18N
        this.queue_bottom_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                DownloadView.this.queue_bottom_buttonActionPerformed(evt);
            }
        });

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(this.progress_pbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(this.status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(this.slots_label))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(this.queue_top_button)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(this.queue_up_button)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(this.queue_down_button)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(this.queue_bottom_button)
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.slots_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(this.file_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.slot_status_label))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(this.file_size_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(6, 6, 6)
                                                .addComponent(this.open_folder_button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(this.copy_link_button))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(this.speed_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(this.pause_button))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(this.close_button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.restart_button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                                                .addComponent(this.keep_temp_checkbox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.stop_button)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(this.queue_down_button)
                                        .addComponent(this.queue_up_button)
                                        .addComponent(this.queue_top_button)
                                        .addComponent(this.queue_bottom_button))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.slots_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(this.slots_label)
                                        .addComponent(this.status_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(this.file_name_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(this.copy_link_button, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(this.open_folder_button)
                                                                .addComponent(this.file_size_label)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.progress_pbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(this.speed_label)
                                                        .addComponent(this.pause_button))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(this.close_button)
                                                                .addComponent(this.restart_button))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(this.stop_button)
                                                                .addComponent(this.keep_temp_checkbox))))
                                        .addComponent(this.slot_status_label))
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void slots_spinnerStateChanged(final javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slots_spinnerStateChanged

        THREAD_POOL.execute(() -> {
            if (this._download.isUse_slots()) {
                this._download.checkSlotsAndWorkers();
            }
        });
    }//GEN-LAST:event_slots_spinnerStateChanged

    private void close_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_buttonActionPerformed

        this._download.close();
    }//GEN-LAST:event_close_buttonActionPerformed

    private void copy_link_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copy_link_buttonActionPerformed

        copyTextToClipboard(this._download.getUrl());
    }//GEN-LAST:event_copy_link_buttonActionPerformed

    private void restart_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restart_buttonActionPerformed

        this._download.restart();

    }//GEN-LAST:event_restart_buttonActionPerformed

    private void stop_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_buttonActionPerformed

        this._download.stop();

    }//GEN-LAST:event_stop_buttonActionPerformed

    private void pause_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_buttonActionPerformed

        this._download.pause();
    }//GEN-LAST:event_pause_buttonActionPerformed

    private void open_folder_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_folder_buttonActionPerformed

        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(new File(this._download.getDownload_path() + "/" + this._download.getFile_name()).getParentFile());
            } catch (final Exception ex) {
                LOG.log(Level.INFO, ex.getMessage());
            }
        }

    }//GEN-LAST:event_open_folder_buttonActionPerformed

    private void queue_up_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queue_up_buttonActionPerformed
        // TODO add your handling code here:

        this.queue_up_button.setEnabled(false);

        THREAD_POOL.execute(() -> {
            this._download.upWaitQueue();
            MiscTools.GUIRunAndWait(() -> {
                this.queue_up_button.setEnabled(true);
            });
        });
    }//GEN-LAST:event_queue_up_buttonActionPerformed

    private void queue_down_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queue_down_buttonActionPerformed
        // TODO add your handling code here:

        this.queue_down_button.setEnabled(false);

        THREAD_POOL.execute(() -> {
            this._download.downWaitQueue();
            MiscTools.GUIRunAndWait(() -> {
                this.queue_down_button.setEnabled(true);
            });
        });
    }//GEN-LAST:event_queue_down_buttonActionPerformed

    private void queue_top_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queue_top_buttonActionPerformed
        // TODO add your handling code here:

        this.queue_top_button.setEnabled(false);

        THREAD_POOL.execute(() -> {
            this._download.topWaitQueue();
            MiscTools.GUIRunAndWait(() -> {
                this.queue_top_button.setEnabled(true);
            });
        });

    }//GEN-LAST:event_queue_top_buttonActionPerformed

    private void queue_bottom_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queue_bottom_buttonActionPerformed
        // TODO add your handling code here:
        this.queue_bottom_button.setEnabled(false);

        THREAD_POOL.execute(() -> {
            this._download.bottomWaitQueue();
            MiscTools.GUIRunAndWait(() -> {
                this.queue_bottom_button.setEnabled(true);
            });
        });
    }//GEN-LAST:event_queue_bottom_buttonActionPerformed

    @Override
    public void pause() {

        this.printStatusNormal("Pausing download ...");

        MiscTools.GUIRunAndWait(() -> {
            for (final JComponent c : new JComponent[]{this.pause_button, this.speed_label, this.slots_label, this.slots_spinner, this.progress_pbar, this.file_name_label, this.file_size_label}) {

                c.setEnabled(false);
            }

            for (final JComponent c : new JComponent[]{this.stop_button, this.keep_temp_checkbox}) {

                c.setVisible(true);
            }
        });
    }

    @Override
    public void resume() {

        this.printStatusNormal("Downloading file from mega ...");

        MiscTools.GUIRunAndWait(() -> {
            for (final JComponent c : new JComponent[]{this.pause_button, this.speed_label, this.slots_label, this.slots_spinner, this.progress_pbar, this.file_name_label, this.file_size_label}) {

                c.setEnabled(true);
            }

            for (final JComponent c : new JComponent[]{this.stop_button, this.keep_temp_checkbox}) {

                c.setVisible(false);
            }

            this.pause_button.setText(LabelTranslatorSingleton.getInstance().translate("PAUSE DOWNLOAD"));
            this._download.getMain_panel().getView().getPause_all_down_button().setVisible(true);
        });

    }

    @Override
    public void stop(final String status) {

        this.printStatusNormal(status);

        MiscTools.GUIRunAndWait(() -> {
            for (final JComponent c : new JComponent[]{this.pause_button, this.keep_temp_checkbox, this.stop_button, this.speed_label, this.slots_label, this.slots_spinner, this.progress_pbar, this.file_name_label, this.file_size_label}) {

                c.setEnabled(false);
            }
        });

    }

    @Override
    public void updateSpeed(final String speed, final Boolean visible) {

        MiscTools.GUIRunAndWait(() -> {
            if (speed != null) {
                this.speed_label.setText(speed);
            }

            if (visible != null) {
                this.speed_label.setVisible(visible);
            }
        });
    }

    @Override
    public void updateProgressBar(final long progress, final double bar_rate) {

        MiscTools.GUIRunAndWait(() -> {
            this.progress_pbar.setValue((int) Math.floor(bar_rate * progress));
        });
    }

    @Override
    public void updateProgressBar(final int value) {
        MiscTools.GUIRunAndWait(() -> {
            this.progress_pbar.setValue(value);
        });
    }

    @Override
    public void printStatusError(final String message) {

        MiscTools.GUIRunAndWait(() -> {
            this.status_label.setForeground(Color.red);
            this.status_label.setText(LabelTranslatorSingleton.getInstance().translate(message));
        });
    }

    @Override
    public void printStatusOK(final String message) {

        MiscTools.GUIRunAndWait(() -> {
            this.status_label.setForeground(new Color(0, 170, 0));
            this.status_label.setText(LabelTranslatorSingleton.getInstance().translate(message));
        });
    }

    @Override
    public void printStatusNormal(final String message) {

        MiscTools.GUIRunAndWait(() -> {
            this.status_label.setForeground(new Color(102, 102, 102));
            this.status_label.setText(LabelTranslatorSingleton.getInstance().translate(message));
        });

    }

    @Override
    public void updateSlotsStatus() {

        synchronized (this._download.getWorkers_lock()) {

            int conta_error = 0;

            conta_error = this._download.getChunkworkers().stream().filter((c) -> (c.isError_wait())).map((_item) -> 1).reduce(conta_error, Integer::sum);

            final String status = conta_error > 0 ? "(" + String.valueOf(conta_error) + ")" : "";

            MiscTools.GUIRun(() -> {
                this.slot_status_label.setForeground(Color.RED);
                this.slot_status_label.setText(status);
            });
        }
    }

    @Override
    public int getSlots() {
        try {
            return (int) (MiscTools.futureRun((Callable) this.getSlots_spinner()::getValue).get());
        } catch (final InterruptedException ex) {
            Logger.getLogger(DownloadView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (final ExecutionException ex) {
            Logger.getLogger(DownloadView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public boolean isKeepTempFileSelected() {

        try {
            return (boolean) (MiscTools.futureRun((Callable) this.getKeep_temp_checkbox()::isSelected).get());
        } catch (final InterruptedException ex) {
            Logger.getLogger(DownloadView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (final ExecutionException ex) {
            Logger.getLogger(DownloadView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_button;
    private javax.swing.JButton copy_link_button;
    private javax.swing.JLabel file_name_label;
    private javax.swing.JLabel file_size_label;
    private javax.swing.JCheckBox keep_temp_checkbox;
    private javax.swing.JButton open_folder_button;
    private javax.swing.JButton pause_button;
    private javax.swing.JProgressBar progress_pbar;
    private javax.swing.JButton queue_bottom_button;
    private javax.swing.JButton queue_down_button;
    private javax.swing.JButton queue_top_button;
    private javax.swing.JButton queue_up_button;
    private javax.swing.JButton restart_button;
    private javax.swing.JLabel slot_status_label;
    private javax.swing.JLabel slots_label;
    private javax.swing.JSpinner slots_spinner;
    private javax.swing.JLabel speed_label;
    private javax.swing.JLabel status_label;
    private javax.swing.JButton stop_button;
    // End of variables declaration//GEN-END:variables
    private static final Logger LOG = Logger.getLogger(DownloadView.class.getName());

}
