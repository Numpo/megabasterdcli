/*
 __  __                  _               _               _ 
|  \/  | ___  __ _  __ _| |__   __ _ ___| |_ ___ _ __ __| |
| |\/| |/ _ \/ _` |/ _` | '_ \ / _` / __| __/ _ \ '__/ _` |
| |  | |  __/ (_| | (_| | |_) | (_| \__ \ ||  __/ | | (_| |
|_|  |_|\___|\__, |\__,_|_.__/ \__,_|___/\__\___|_|  \__,_|
             |___/                                         
Â© Perpetrated by tonikelope since 2016
 */
package com.tonikelope.megabasterd;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.tonikelope.megabasterd.MainPanel.THREAD_POOL;
import static com.tonikelope.megabasterd.MiscTools.checkMegaAccountLoginAndShowMasterPassDialog;
import static com.tonikelope.megabasterd.MiscTools.findFirstRegex;
import static com.tonikelope.megabasterd.MiscTools.truncateText;

/**
 * @author tonikelope
 */
public class LinkGrabberDialog extends javax.swing.JDialog implements ClipboardChangeObserver {

    private boolean _download;
    private String _download_path, _selected_item;
    private final ClipboardSpy _clipboardspy;
    private final MainPanel _main_panel;

    public MainPanel getMain_panel() {
        return this._main_panel;
    }

    public JComboBox<String> getUse_mega_account_down_combobox() {
        return this.use_mega_account_down_combobox;
    }

    public JButton getDance_button() {
        return this.dance_button;
    }

    public boolean isDownload() {
        return this._download;
    }

    public String getDownload_path() {
        return this._download_path;
    }

    public JTextArea getLinks_textarea() {
        return this.links_textarea;
    }

    public LinkGrabberDialog(final MainPanelView parent, final boolean modal, final String download_path, final ClipboardSpy clipboardspy) {

        super(parent, modal);

        this._main_panel = parent.getMain_panel();

        this._download = false;

        this._download_path = Paths.get(download_path).toAbsolutePath().normalize().toString();

        this._selected_item = null;

        this._clipboardspy = clipboardspy;

        MiscTools.GUIRunAndWait(() -> {

            this.initComponents();

//            updateFonts(this, GUI_FONT, _main_panel.getZoom_factor());
//
//            translateLabels(this);

            this.download_dir_label.setText(truncateText(this._download_path, 80));

            if (this._main_panel.isUse_mega_account_down() && this._main_panel.getMega_accounts().size() > 0) {

                THREAD_POOL.execute(() -> {
                    MiscTools.GUIRun(() -> {
                        final String mega_default_down = this._main_panel.getMega_account_down();

                        this.use_mega_account_down_combobox.addItem(mega_default_down);

                        this._main_panel.getMega_accounts().keySet().stream().filter((k) -> (!mega_default_down.equals(k))).forEachOrdered((k) -> {
                            this.use_mega_account_down_combobox.addItem(k);
                        });

                        this.use_mega_account_down_combobox.addItem("");
                        this.use_mega_account_down_combobox.setSelectedIndex(0);
                    });
                });

            } else {
                this.use_mega_account_down_combobox.setEnabled(false);
                this.use_mega_account_down_combobox.setVisible(false);
                this.use_mega_account_down_label.setEnabled(false);
                this.use_mega_account_down_label.setVisible(false);
            }

            this.pack();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.links_scrollpane = new javax.swing.JScrollPane();
        this.links_textarea = new javax.swing.JTextArea();
        this.dance_button = new javax.swing.JButton();
        this.links_label = new javax.swing.JLabel();
        this.change_dir_button = new javax.swing.JButton();
        this.down_dir_to_label = new javax.swing.JLabel();
        this.download_dir_label = new javax.swing.JLabel();
        this.dlc_button = new javax.swing.JButton();
        this.use_mega_account_down_label = new javax.swing.JLabel();
        this.use_mega_account_down_combobox = new javax.swing.JComboBox<>();
        this.priority_checkbox = new javax.swing.JCheckBox();

        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.setTitle("Link Grabber");

        this.links_textarea.setColumns(20);
        this.links_textarea.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        this.links_textarea.setRows(5);
        this.links_textarea.setDoubleBuffered(true);
        this.links_scrollpane.setViewportView(this.links_textarea);
        this.links_textarea.addMouseListener(new ContextMenuMouseListener());

        this.dance_button.setBackground(new java.awt.Color(102, 204, 255));
        this.dance_button.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        this.dance_button.setForeground(new java.awt.Color(255, 255, 255));
        this.dance_button.setText("Let's dance, baby");
        this.dance_button.setDoubleBuffered(true);
        this.dance_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                LinkGrabberDialog.this.dance_buttonActionPerformed(evt);
            }
        });

        this.links_label.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        this.links_label.setText("Put your MEGA/MegaCrypter/ELC link/s here (one per line):");
        this.links_label.setDoubleBuffered(true);

        this.change_dir_button.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        this.change_dir_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-folder-30.png"))); // NOI18N
        this.change_dir_button.setText("Change it");
        this.change_dir_button.setDoubleBuffered(true);
        this.change_dir_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                LinkGrabberDialog.this.change_dir_buttonActionPerformed(evt);
            }
        });

        this.down_dir_to_label.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.down_dir_to_label.setText("Download folder:");
        this.down_dir_to_label.setDoubleBuffered(true);

        this.download_dir_label.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        this.download_dir_label.setText("default dir");

        this.dlc_button.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        this.dlc_button.setIcon(new javax.swing.ImageIcon(this.getClass().getResource("/images/icons8-add-file-30.png"))); // NOI18N
        this.dlc_button.setText("Load DLC container");
        this.dlc_button.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                LinkGrabberDialog.this.dlc_buttonActionPerformed(evt);
            }
        });

        this.use_mega_account_down_label.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        this.use_mega_account_down_label.setText("Use this account for download:");

        this.use_mega_account_down_combobox.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        this.use_mega_account_down_combobox.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                LinkGrabberDialog.this.use_mega_account_down_comboboxItemStateChanged(evt);
            }
        });

        this.priority_checkbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        this.priority_checkbox.setText("Put on TOP of waiting queue");
        this.priority_checkbox.setDoubleBuffered(true);

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
        this.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(this.priority_checkbox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(this.dance_button))
                                        .addComponent(this.links_scrollpane)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(this.links_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                                                .addComponent(this.dlc_button))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(this.use_mega_account_down_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.use_mega_account_down_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(this.change_dir_button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.down_dir_to_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(this.download_dir_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.links_label)
                                        .addComponent(this.dlc_button))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(this.links_scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.change_dir_button)
                                        .addComponent(this.down_dir_to_label)
                                        .addComponent(this.download_dir_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.use_mega_account_down_label)
                                        .addComponent(this.use_mega_account_down_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(this.dance_button)
                                        .addComponent(this.priority_checkbox))
                                .addContainerGap())
        );

        this.pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dance_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dance_buttonActionPerformed

        this._download = true;

        this.setVisible(false);
    }//GEN-LAST:event_dance_buttonActionPerformed

    private void change_dir_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change_dir_buttonActionPerformed

        this.change_dir_button.setText(LabelTranslatorSingleton.getInstance().translate("Selecting folder..."));
        this.change_dir_button.setEnabled(false);

        final javax.swing.JFileChooser filechooser = new javax.swing.JFileChooser();

//        updateFonts(filechooser, GUI_FONT, (float) (_main_panel.getZoom_factor() * 1.25));

        filechooser.setCurrentDirectory(new java.io.File(this._download_path));
        filechooser.setDialogTitle("Download folder");
        filechooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        filechooser.setAcceptAllFileFilterUsed(false);

        if (filechooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            final File file = filechooser.getSelectedFile();

            this._download_path = file.getAbsolutePath();

            this.download_dir_label.setText(truncateText(this._download_path, 80));

        }

        this.change_dir_button.setText(LabelTranslatorSingleton.getInstance().translate("Change it"));
        this.change_dir_button.setEnabled(true);

        this.pack();
    }//GEN-LAST:event_change_dir_buttonActionPerformed

    private void dlc_buttonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlc_buttonActionPerformed

        this.dlc_button.setText(LabelTranslatorSingleton.getInstance().translate("Loading DLC, please wait..."));

        this.dlc_button.setEnabled(false);

        this.links_textarea.setEnabled(false);

        this.dance_button.setEnabled(false);

        this.pack();

        final javax.swing.JFileChooser filechooser = new javax.swing.JFileChooser();

//        updateFonts(filechooser, GUI_FONT, (float) (_main_panel.getZoom_factor() * 1.25));

        filechooser.setDialogTitle("Select DLC container");

        filechooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

        filechooser.addChoosableFileFilter(new FileNameExtensionFilter("DLC", "dlc"));

        filechooser.setAcceptAllFileFilterUsed(false);

        if (filechooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            final File file = filechooser.getSelectedFile();

            THREAD_POOL.execute(() -> {
                try (final InputStream is = new BufferedInputStream(new FileInputStream(file)); final ByteArrayOutputStream out = new ByteArrayOutputStream()) {
                    final byte[] buffer = new byte[MainPanel.DEFAULT_BYTE_BUFFER_SIZE];
                    int reads;
                    while ((reads = is.read(buffer)) != -1) {

                        out.write(buffer, 0, reads);
                    }
                    final String dlc = new String(out.toByteArray(), "UTF-8");
                    final Set<String> links = CryptTools.decryptDLC(dlc, ((MainPanelView) this.getParent()).getMain_panel());
                    for (final Iterator<String> i = links.iterator(); i.hasNext(); ) {

                        String link = i.next();

                        link = MiscTools.newMegaLinks2Legacy(link);

                        if (findFirstRegex("(?:https?|mega)://[^/]*/(#.*?)?!.+![^\r\n]+", link, 0) == null) {

                            i.remove();
                        }
                    }
                    if (!links.isEmpty()) {
                        MiscTools.GUIRun(() -> {
                            this.links_textarea.setText("");

                            for (final Iterator<String> i = links.iterator(); i.hasNext(); ) {

                                this.links_textarea.append(i.next());

                                if (i.hasNext()) {

                                    this.links_textarea.append("\r\n");
                                }
                            }
                        });
                    }
                } catch (final FileNotFoundException ex) {
                    LOG.log(Level.SEVERE, ex.getMessage());
                } catch (final IOException ex) {
                    LOG.log(Level.SEVERE, ex.getMessage());
                }
                MiscTools.GUIRun(() -> {
                    this.dlc_button.setText(LabelTranslatorSingleton.getInstance().translate("Load DLC container"));

                    this.dlc_button.setEnabled(true);

                    this.links_textarea.setEnabled(true);

                    this.dance_button.setEnabled(true);

                    this.pack();
                });
            });

        } else {

            this.dlc_button.setText(LabelTranslatorSingleton.getInstance().translate("Load DLC container"));

            this.dlc_button.setEnabled(true);

            this.links_textarea.setEnabled(true);

            this.dance_button.setEnabled(true);

            this.pack();

        }
    }//GEN-LAST:event_dlc_buttonActionPerformed

    private void use_mega_account_down_comboboxItemStateChanged(final java.awt.event.ItemEvent evt) {//GEN-FIRST:event_use_mega_account_down_comboboxItemStateChanged

        if (this._selected_item == null || !this.use_mega_account_down_combobox.getSelectedItem().equals(this._selected_item)) {
            this._selected_item = (String) this.use_mega_account_down_combobox.getSelectedItem();

            if (this._main_panel.isUse_mega_account_down() && !"".equals(this._selected_item)) {

                this.use_mega_account_down_combobox.setEnabled(false);

                this.dance_button.setEnabled(false);

                this.dance_button.setText(LabelTranslatorSingleton.getInstance().translate("Checking MEGA account..."));

                this.pack();

                final LinkGrabberDialog tthis = this;

                THREAD_POOL.execute(() -> {
                    boolean use_account = true;
                    try {

                        if (checkMegaAccountLoginAndShowMasterPassDialog(this._main_panel, this._selected_item) == null) {
                            use_account = false;
                        }

                    } catch (final Exception ex) {

                        use_account = false;
                    }
                    if (!use_account) {
                        MiscTools.GUIRun(() -> {
                            this.use_mega_account_down_combobox.setSelectedIndex(this._main_panel.getMega_accounts().size());
                        });
                    }
                    MiscTools.GUIRun(() -> {
                        this.getUse_mega_account_down_combobox().setEnabled(true);

                        this.getDance_button().setText(LabelTranslatorSingleton.getInstance().translate("Let's dance, baby"));

                        this.getDance_button().setEnabled(true);

                        this.pack();
                    });
                });

            }
        }
    }//GEN-LAST:event_use_mega_account_down_comboboxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton change_dir_button;
    private javax.swing.JButton dance_button;
    private javax.swing.JButton dlc_button;
    private javax.swing.JLabel down_dir_to_label;
    private javax.swing.JLabel download_dir_label;
    private javax.swing.JLabel links_label;
    private javax.swing.JScrollPane links_scrollpane;
    private javax.swing.JTextArea links_textarea;
    private javax.swing.JCheckBox priority_checkbox;
    private javax.swing.JComboBox<String> use_mega_account_down_combobox;
    private javax.swing.JLabel use_mega_account_down_label;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyClipboardChange() {

        MiscTools.GUIRun(() -> {
            final String current_text = this.links_textarea.getText();

//            links_textarea.append((current_text.length() > 0 ? "\n\n" : "") + extractMegaLinksFromString(extractStringFromClipboardContents(_clipboardspy.getContents())));
        });
    }

    public JCheckBox getPriority_checkbox() {
        return this.priority_checkbox;
    }

    private static final Logger LOG = Logger.getLogger(LinkGrabberDialog.class.getName());
}
